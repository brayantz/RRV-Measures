function [v, vr] = vulnerability(dem, sup, varargin)
% Index of vulneravility
%
% Syntax
%   v = vulnerability(dem, sup)
%   v = vulnerability(__, method, aspect, norm, tol)
%
% Input arguments
%   dem    - Matrix of demands (each column is a site).
%   sup    - Matrix vector of supplies.
%   aspect - Vulnerability aspect, maximun or acumulated deficits
%            of spells.
%            Options: 'maxdef', 'accumdef'
%   method - Method of vulnerability.
%            Options: 'mean' (default), 'max', 'q90'
%   tol    - Tolerance, 10^-6 by default.
%
% Output arguments
%   v      - vector of vulneravility.
%   vr     - Normalized vulnerability.

% Brayan Torres Z. (torres.zagastizabal@gmail.com)


% Check arguments.
if nargin < 3 || isempty(varargin{1})
    aspect = 'maxdef';
else
    aspect = varargin{1};
end

if nargin < 4 || isempty(varargin{2})
    method = 'mean';
else
    method = varargin{2};
end

if nargin < 5 || isempty(varargin{3})
    tol = 10^-6;
else
    tol = varargin{3};
end


% Vulneravility.
switch method
    case 'mean'
        funcMethod = @mean;
    case 'max'
        funcMethod = @max;
    case 'q90'
        funcMethod = @quantile90;
    otherwise
        error('Invalid method.')
end

switch aspect
    case 'maxdef'
        funcAspect = @max;
    case 'accumdef'
        funcAspect = @sum;
    otherwise
        error('Invalid aspect.')
end


def = dem - sup;
def(def < tol) = 0;

nCols = size(def, 2);
v = nan(1, nCols);
vr = nan(1, nCols);
for i = 1:nCols
    [ini, fin] = locspells(def(:,i));
    if ~isempty(ini)
        nSpells = numel(ini);
        varDef = nan(1, nSpells);
        for j = 1:nSpells
            thisDef = def(ini(j):fin(j), i);
%             thisDem = dem(ini(j):fin(j), i);
            varDef(j) = funcAspect(thisDef);
        end
        v(i) = funcMethod(varDef);
    else
        v(i) = 0;
    end
end

end

%%
function v = quantile90(d)

v = quantile(d, 0.9);

end

% %%
% function varDef = maxdef(def)
% 
% [varDef] = max(def);
% 
% end
% 
% %%
% function varDef = accumdef(def)
% 
% varDef = sum(def);
% 
% end
% 
% %%
% function v = mean_v(varDef)
% 
% v = mean(varDef);
% 
% end
% 
% %%
% function [v, vr] = max_v(varDef, varDem)
% 
% [v, ind] = max(varDef);
% vr = v/varDem(ind);
% 
% end
% 
% %%
% function [v, vr] = q90_v(varDef, varDem)
% 
% proxy = quantile(varDef, 0.9);
% [~, ind] = min(varDef - proxy);
% v = varDef(ind);
% vr = v/varDem(ind);
% 
% end


% %% Maximun deficit of spell.
% function d = maxdef(dem, sup)
% 
% d = max(dem - sup);
% 
% end
% 
% 
% %% Accumulated deficits of spell.
% function d = accumdef(dem, sup)
% 
% d = sum(dem - sup);
% 
% end
